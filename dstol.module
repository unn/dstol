<?php

include_once('dstol.features.inc');

/**
 * Implementation of hook_enable().
 */
function dstol_enable() {
  // Weight needs to be high in order to strongarm variables.
  db_query("UPDATE {system} SET weight = 100 WHERE name = 'dstol' AND type = 'module'");

  // Enable recommended modules if they are available. We save the modules we
  // enabled to a variable so we can disable them when this feature is disabled.
  if (function_exists('features_get_features') && ($feature = features_get_features('dstol')) && !empty($feature->info['recommends'])) {
    $all_modules = array_keys(module_rebuild_cache());
    // Filter out any non-existent modules.
    $modules = array_intersect($feature->info['recommends'], $all_modules);
    // Find out if any modules are already enabled.
    $enabled = array_filter($modules, 'module_exists');

    // We only want disabled modules.
    if ($modules = array_diff($modules, $enabled)) {
      features_install_modules($modules);
      variable_set('dstol_enabled_modules', $modules);

      // Let somebody know what we just did.
      $singular = 'The @modules module was enabled.';
      $plural = 'The following modules were enabled: @modules';
      $message = format_plural(count($modules), $singular, $plural, array('@modules' => implode(', ', $modules)));
      drupal_set_message($message);
    }
  }

  drupal_flush_all_caches();
}

/**
 * Implementation of hook_disable().
 */
function dstol_disable() {
  if ($modules = variable_get('dstol_enabled_modules', array())) {
    module_disable($modules);

    // Let somebody know what we just did.
    $singular = 'The @modules module was disabled.';
    $plural = 'The following modules were disabled: @modules';
    $message = format_plural(count($modules), $singular, $plural, array('@modules' => implode(', ', $modules)));
    drupal_set_message($message);

    // Delete the old variable.
    variable_del('dstol_enabled_modules');
  }
}

/**
 * Implementation of hook_menu().
 */
function dstol_menu() {
  $items = array();

  $items['typography'] = array(
    'title' => 'Typography Test Page',
    'description' => 'Configure settings',
    'page callback' => 'dstol_typography_test_page',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function dstol_theme() {
  $items = array();

  $items['typography_test_page'] = array(
    'template' => 'typography-test-page',
  );

  return $items;
}

/**
 * Page callback for typography-test-page.
 */
function dstol_typography_test_page() {
  return theme('typography_test_page');
}